{"version":3,"file":"index.umd.js","sources":["../src/bitcoinish/utils.ts","../src/bitcoinish/types.ts","../src/bitcoinish/BlockbookConnected.ts","../src/bitcoinish/BitcoinishPaymentsUtils.ts","../src/bitcoinish/BitcoinishPayments.ts","../src/types.ts","../src/constants.ts","../src/utils.ts","../src/helpers.ts","../src/BaseBitcoinPayments.ts","../src/bip44.ts","../src/HdBitcoinPayments.ts","../src/BitcoinPaymentsUtils.ts","../src/BitcoinPaymentsFactory.ts"],"sourcesContent":["import { NetworkType, UtxoInfo } from '@faast/payments-common'\nimport { BlockbookConnectedConfig } from './types'\nimport { BlockbookBitcoin } from 'blockbook-client'\nimport { isString, Logger, isMatchingError, toBigNumber } from '@faast/ts-common'\nimport promiseRetry from 'promise-retry'\n\nexport function resolveServer(server: BlockbookConnectedConfig['server'], network: NetworkType): {\n  api: BlockbookBitcoin\n  server: string | null\n} {\n  if (isString(server)) {\n    return {\n      api: new BlockbookBitcoin({\n        nodes: [server],\n      }),\n      server,\n    }\n  } else if (server instanceof BlockbookBitcoin) {\n    return {\n      api: server,\n      server: server.nodes[0] || '',\n    }\n  } else {\n    // null server arg -> offline mode\n    return {\n      api: new BlockbookBitcoin({\n        nodes: [''],\n      }),\n      server: null,\n    }\n  }\n}\n\nconst RETRYABLE_ERRORS = ['timeout', 'disconnected']\nconst MAX_RETRIES = 3\n\nexport function retryIfDisconnected<T>(fn: () => Promise<T>, api: BlockbookBitcoin, logger: Logger): Promise<T> {\n  return promiseRetry(\n    (retry, attempt) => {\n      return fn().catch(async e => {\n        if (isMatchingError(e, RETRYABLE_ERRORS)) {\n          logger.log(\n            `Retryable error during blockbook server call, retrying ${MAX_RETRIES - attempt} more times`,\n            e.toString(),\n          )\n          retry(e)\n        }\n        throw e\n      })\n    },\n    {\n      retries: MAX_RETRIES,\n    },\n  )\n}\n\n/**\n * Estimate size of transaction a certain number of inputs and outputs.\n * This function is based off of ledger-wallet-webtool/src/TransactionUtils.js#estimateTransactionSize\n */\nexport function estimateTxSize (inputsCount: number, outputsCount: number, handleSegwit: boolean) {\n  let maxNoWitness\n  let maxSize\n  let maxWitness\n  let minNoWitness\n  let minSize\n  let minWitness\n  let varintLength\n\n  if (inputsCount < 0xfd) {\n    varintLength = 1\n  } else if (inputsCount < 0xffff) {\n    varintLength = 3\n  } else {\n    varintLength = 5\n  }\n  if (handleSegwit) {\n    minNoWitness =\n      varintLength + 4 + 2 + 59 * inputsCount + 1 + 31 * outputsCount + 4\n    maxNoWitness =\n      varintLength + 4 + 2 + 59 * inputsCount + 1 + 33 * outputsCount + 4\n    minWitness =\n      varintLength +\n      4 +\n      2 +\n      59 * inputsCount +\n      1 +\n      31 * outputsCount +\n      4 +\n      106 * inputsCount\n    maxWitness =\n      varintLength +\n      4 +\n      2 +\n      59 * inputsCount +\n      1 +\n      33 * outputsCount +\n      4 +\n      108 * inputsCount\n    minSize = (minNoWitness * 3 + minWitness) / 4\n    maxSize = (maxNoWitness * 3 + maxWitness) / 4\n  } else {\n    minSize = varintLength + 4 + 146 * inputsCount + 1 + 31 * outputsCount + 4\n    maxSize = varintLength + 4 + 148 * inputsCount + 1 + 33 * outputsCount + 4\n  }\n  return {\n    min: minSize,\n    max: maxSize\n  }\n}\n\nexport function estimateTxFee (satPerByte: number, inputsCount: number, outputsCount: number, handleSegwit: boolean) {\n  const { min, max } = estimateTxSize(inputsCount, outputsCount, handleSegwit)\n  const mean = Math.ceil((min + max) / 2)\n  return mean * satPerByte\n}\n\n/**\n * Sort the utxos for input selection\n */\nexport function sortUtxos(utxoList: UtxoInfo[]): UtxoInfo[] {\n  const matureList: UtxoInfo[] = []\n  const immatureList: UtxoInfo[] = []\n  utxoList.forEach((utxo) => {\n    if (utxo.confirmations && utxo.confirmations >= 6) {\n      matureList.push(utxo)\n    } else {\n      immatureList.push(utxo)\n    }\n  })\n  matureList.sort((a, b) => toBigNumber(a.value).minus(b.value).toNumber()) // Ascending order by value\n  immatureList.sort((a, b) => (b.confirmations || 0) - (a.confirmations || 0)) // Descending order by confirmations\n  return matureList.concat(immatureList)\n}\n","import * as t from 'io-ts'\nimport {\n  BaseUnsignedTransaction, BaseSignedTransaction, FeeRate, AutoFeeLevels,\n  BaseTransactionInfo, BaseBroadcastResult, UtxoInfo, NetworkTypeT,\n} from '@faast/payments-common'\nimport { extendCodec, nullable, instanceofCodec, requiredOptionalCodec, Logger } from '@faast/ts-common'\nimport { Network as BitcoinjsNetwork } from 'bitcoinjs-lib'\nimport { BlockbookBitcoin, BlockInfoBitcoin } from 'blockbook-client'\n\nexport { BitcoinjsNetwork, UtxoInfo }\n\n/** A hack to get around TS2742 when config is re-exported from coin-payments */\nexport class BlockbookServerAPI extends BlockbookBitcoin {}\n\nexport const BlockbookConfigServer = t.union([t.string, instanceofCodec(BlockbookServerAPI), t.null], 'BlockbookConfigServer')\nexport type BlockbookConfigServer = t.TypeOf<typeof BlockbookConfigServer>\n\nexport const BlockbookConnectedConfig = requiredOptionalCodec(\n  {\n    network: NetworkTypeT,\n    server: BlockbookConfigServer,\n  },\n  {\n    logger: nullable(Logger),\n  },\n  'BlockbookConnectedConfig',\n)\nexport type BlockbookConnectedConfig = t.TypeOf<typeof BlockbookConnectedConfig>\n\nexport type BitcoinishPaymentsUtilsConfig = BlockbookConnectedConfig & {\n  coinSymbol: string,\n  coinName: string,\n  bitcoinjsNetwork: BitcoinjsNetwork,\n  decimals: number,\n}\n\nexport type BitcoinishPaymentsConfig = BitcoinishPaymentsUtilsConfig & {\n  minTxFee: FeeRate,\n  dustThreshold: number,\n  networkMinRelayFee: number,\n  isSegwit: boolean,\n  defaultFeeLevel: AutoFeeLevels,\n}\n\nexport const BitcoinishTxOutput = t.type({\n  address: t.string,\n  value: t.string,\n}, 'BitcoinishTxOutput')\nexport type BitcoinishTxOutput = t.TypeOf<typeof BitcoinishTxOutput>\n\nexport const BitcoinishPaymentTx = t.type({\n  inputs: t.array(UtxoInfo),\n  outputs: t.array(BitcoinishTxOutput),\n  fee: t.string,\n  change: t.string,\n  changeAddress: nullable(t.string),\n}, 'BitcoinishPaymentTx')\nexport type BitcoinishPaymentTx = t.TypeOf<typeof BitcoinishPaymentTx>\n\nexport const BitcoinishUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    amount: t.string,\n    fee: t.string,\n  },\n  'BitcoinishUnsignedTransaction',\n)\nexport type BitcoinishUnsignedTransaction = t.TypeOf<typeof BitcoinishUnsignedTransaction>\n\nexport const BitcoinishSignedTransaction = extendCodec(BaseSignedTransaction, {\n  data: t.type({\n    hex: t.string,\n  }),\n}, {}, 'BitcoinishSignedTransaction')\nexport type BitcoinishSignedTransaction = t.TypeOf<typeof BitcoinishSignedTransaction>\n\nexport const BitcoinishTransactionInfo = extendCodec(BaseTransactionInfo, {}, {}, 'BitcoinishTransactionInfo')\nexport type BitcoinishTransactionInfo = t.TypeOf<typeof BitcoinishTransactionInfo>\n\nexport const BitcoinishBroadcastResult = extendCodec(BaseBroadcastResult, {}, {}, 'BitcoinishBroadcastResult')\nexport type BitcoinishBroadcastResult = t.TypeOf<typeof BitcoinishBroadcastResult>\n\nexport const BitcoinishBlock = BlockInfoBitcoin\nexport type BitcoinishBlock = BlockInfoBitcoin\n","import { NetworkType } from '@faast/payments-common'\nimport { Logger, assertType, DelegateLogger } from '@faast/ts-common'\nimport { BlockbookBitcoin } from 'blockbook-client'\n\nimport { BlockbookConnectedConfig } from './types'\nimport { DEFAULT_NETWORK, PACKAGE_NAME } from '../constants'\nimport { resolveServer, retryIfDisconnected } from './utils'\n\nexport abstract class BlockbookConnected {\n  networkType: NetworkType\n  logger: Logger\n  api: BlockbookBitcoin | null\n  server: string | null\n\n  constructor(config: BlockbookConnectedConfig) {\n    assertType(BlockbookConnectedConfig, config)\n    this.networkType = config.network\n    this.logger = new DelegateLogger(config.logger)\n    const { api, server } = resolveServer(config.server, this.networkType)\n    this.api = api\n    this.server = server\n  }\n\n  getApi(): BlockbookBitcoin {\n    if (this.api === null) {\n      throw new Error('Cannot access Bitcoin network when configured with null server')\n    }\n    return this.api\n  }\n\n  async init(): Promise<void> {}\n\n  async destroy(): Promise<void> {}\n\n  async _retryDced<T>(fn: () => Promise<T>): Promise<T> {\n    return retryIfDisconnected(fn, this.getApi(), this.logger)\n  }\n}\n","import { PaymentsUtils, Payport, createUnitConverters } from '@faast/payments-common'\nimport { Network as BitcoinjsNetwork } from 'bitcoinjs-lib'\nimport { isNil, assertType, Numeric, isUndefined } from '@faast/ts-common'\nimport { BlockbookConnected } from './BlockbookConnected'\nimport { BitcoinishBlock, BitcoinishPaymentsUtilsConfig } from './types'\n\ntype UnitConverters = ReturnType<typeof createUnitConverters>\n\nexport abstract class BitcoinishPaymentsUtils extends BlockbookConnected implements PaymentsUtils {\n\n  decimals: number\n  bitcoinjsNetwork: BitcoinjsNetwork\n\n  constructor(config: BitcoinishPaymentsUtilsConfig) {\n    super(config)\n    this.decimals = config.decimals\n    this.bitcoinjsNetwork = config.bitcoinjsNetwork\n    const unitConverters = createUnitConverters(this.decimals)\n    this.toMainDenominationString = unitConverters.toMainDenominationString\n    this.toMainDenominationNumber = unitConverters.toMainDenominationNumber\n    this.toMainDenominationBigNumber = unitConverters.toMainDenominationBigNumber\n    this.toBaseDenominationString = unitConverters.toBaseDenominationString\n    this.toBaseDenominationNumber = unitConverters.toBaseDenominationNumber\n    this.toBaseDenominationBigNumber = unitConverters.toBaseDenominationBigNumber\n  }\n\n  async isValidExtraId(extraId: string): Promise<boolean> {\n    return false // utxo coins don't use extraIds\n  }\n\n  abstract async isValidAddress(address: string): Promise<boolean>\n\n  private async _getPayportValidationMessage(payport: Payport): Promise<string | undefined> {\n    const { address, extraId } = payport\n    if (!await this.isValidAddress(address)) {\n      return 'Invalid payport address'\n    }\n    if (!isNil(extraId)) {\n      return 'Invalid payport extraId'\n    }\n  }\n\n  async getPayportValidationMessage(payport: Payport): Promise<string | undefined> {\n    try {\n      payport = assertType(Payport, payport, 'payport')\n    } catch (e) {\n      return e.message\n    }\n    return this._getPayportValidationMessage(payport)\n  }\n\n  async validatePayport(payport: Payport): Promise<void> {\n    payport = assertType(Payport, payport, 'payport')\n    const message = await this._getPayportValidationMessage(payport)\n    if (message) {\n      throw new Error(message)\n    }\n  }\n\n  async isValidPayport(payport: Payport): Promise<boolean> {\n    return Payport.is(payport) && !(await this._getPayportValidationMessage(payport))\n  }\n\n  toMainDenomination(amount: Numeric): string {\n    return this.toMainDenominationString(amount)\n  }\n\n  toBaseDenomination(amount: Numeric): string {\n    return this.toBaseDenominationString(amount)\n  }\n\n  toMainDenominationString: UnitConverters['toMainDenominationString']\n  toMainDenominationNumber: UnitConverters['toMainDenominationNumber']\n  toMainDenominationBigNumber: UnitConverters['toMainDenominationBigNumber']\n\n  toBaseDenominationString: UnitConverters['toMainDenominationString']\n  toBaseDenominationNumber: UnitConverters['toMainDenominationNumber']\n  toBaseDenominationBigNumber: UnitConverters['toMainDenominationBigNumber']\n\n  async getBlock(id?: string | number): Promise<BitcoinishBlock> {\n    if (isUndefined(id)) {\n      id = (await this.getApi().getStatus()).backend.bestBlockHash\n    }\n    return this.getApi().getBlock(id)\n  }\n}\n","import {\n  BasePayments, UtxoInfo, FeeOptionCustom, FeeRateType, FeeRate, FeeOption,\n  ResolvedFeeOption, FeeLevel, AutoFeeLevels, Payport, ResolveablePayport,\n  BalanceResult, NetworkType, FromTo, TransactionStatus, CreateTransactionOptions, BaseConfig,\n} from '@faast/payments-common'\nimport { isUndefined, isType, Numeric, toBigNumber } from '@faast/ts-common'\nimport BigNumber from 'bignumber.js'\nimport { get } from 'lodash'\n\nimport {\n  BitcoinishUnsignedTransaction, BitcoinishSignedTransaction, BitcoinishBroadcastResult, BitcoinishTransactionInfo,\n  BitcoinishPaymentsConfig, BlockbookConnectedConfig,\n  BitcoinishPaymentTx, BitcoinishTxOutput,\n  BitcoinishPaymentsUtilsConfig,\n} from './types'\nimport { sortUtxos, estimateTxFee } from './utils'\nimport { BitcoinishPaymentsUtils } from './BitcoinishPaymentsUtils'\n\nexport abstract class BitcoinishPayments<Config extends BaseConfig> extends BitcoinishPaymentsUtils\n  implements BasePayments<\n    Config,\n    BitcoinishUnsignedTransaction,\n    BitcoinishSignedTransaction,\n    BitcoinishBroadcastResult,\n    BitcoinishTransactionInfo\n  > {\n  coinSymbol: string\n  coinName: string\n  minTxFee?: FeeRate\n  dustThreshold: number\n  networkMinRelayFee: number\n  isSegwit: boolean\n  defaultFeeLevel: AutoFeeLevels\n\n  constructor(config: BitcoinishPaymentsConfig) {\n    super(config)\n    this.coinSymbol = config.coinSymbol\n    this.coinName = config.coinName\n    this.decimals = config.decimals\n    this.bitcoinjsNetwork = config.bitcoinjsNetwork\n    this.minTxFee = config.minTxFee\n    this.dustThreshold = config.dustThreshold\n    this.networkMinRelayFee = config.networkMinRelayFee\n    this.isSegwit = config.isSegwit\n    this.defaultFeeLevel = config.defaultFeeLevel\n  }\n\n  abstract getFullConfig(): Config\n  abstract getPublicConfig(): Config\n  abstract getAccountId(index: number): string\n  abstract getAccountIds(): string[]\n  abstract getAddress(index: number): string\n  abstract getFeeRateRecommendation(feeLevel: AutoFeeLevels): Promise<FeeRate>\n  abstract isValidAddress(address: string): Promise<boolean>\n  abstract signTransaction(tx: BitcoinishUnsignedTransaction): Promise<BitcoinishSignedTransaction>\n\n  async init() {}\n  async destroy() {}\n\n  requiresBalanceMonitor() {\n    return false\n  }\n\n  isSweepableBalance(balance: Numeric): boolean {\n    return this.toBaseDenominationNumber(balance) > this.networkMinRelayFee\n  }\n\n  async getPayport(index: number): Promise<Payport> {\n    return { address: this.getAddress(index) }\n  }\n\n  async resolvePayport(payport: ResolveablePayport): Promise<Payport> {\n    if (typeof payport === 'number') {\n      return this.getPayport(payport)\n    } else if (typeof payport === 'string') {\n      if (!await this.isValidAddress(payport)) {\n        throw new Error(`Invalid BTC address: ${payport}`)\n      }\n      return { address: payport }\n    } else if (Payport.is(payport)) {\n      if (!await this.isValidAddress(payport.address)) {\n        throw new Error(`Invalid BTC payport.address: ${payport.address}`)\n      }\n      return payport\n    } else {\n      throw new Error('Invalid payport')\n    }\n  }\n\n  _feeRateToSatoshis(\n    { feeRate, feeRateType }: FeeRate,\n    inputCount: number,\n    outputCount: number,\n  ): number {\n    if (feeRateType === FeeRateType.BasePerWeight) {\n      return estimateTxFee(Number.parseFloat(feeRate), inputCount, outputCount, this.isSegwit)\n    } else if (feeRateType === FeeRateType.Main) {\n      return this.toBaseDenominationNumber(feeRate)\n    }\n    return Number.parseFloat(feeRate)\n  }\n\n  _calculatTxFeeSatoshis(\n    targetRate: FeeRate,\n    inputCount: number,\n    outputCount: number,\n  ) {\n    let feeSat = this._feeRateToSatoshis(targetRate, inputCount, outputCount)\n    // Ensure calculated fee is above network minimum\n    if (this.minTxFee) {\n      const minTxFeeSat = this._feeRateToSatoshis(this.minTxFee, inputCount, outputCount)\n      if (feeSat < minTxFeeSat) {\n        feeSat = minTxFeeSat\n      }\n    }\n    if (feeSat < this.networkMinRelayFee) {\n      feeSat = this.networkMinRelayFee\n    }\n    return Math.ceil(feeSat)\n  }\n\n  async resolveFeeOption(\n    feeOption: FeeOption,\n  ): Promise<ResolvedFeeOption> {\n    let targetLevel: FeeLevel\n    let target: FeeRate\n    let feeBase = ''\n    let feeMain = ''\n    if (isType(FeeOptionCustom, feeOption)) {\n      targetLevel = FeeLevel.Custom\n      target = feeOption\n    } else {\n      targetLevel = feeOption.feeLevel || this.defaultFeeLevel\n      target = await this.getFeeRateRecommendation(targetLevel)\n    }\n    if (target.feeRateType === FeeRateType.Base) {\n      feeBase = target.feeRate\n      feeMain = this.toMainDenominationString(feeBase)\n    } else if (target.feeRateType === FeeRateType.Main) {\n      feeMain = target.feeRate\n      feeBase = this.toBaseDenominationString(feeMain)\n    }\n    // in base/weight case total fees depend on input/output count, so just leave them as empty strings\n    return {\n      targetFeeLevel: targetLevel,\n      targetFeeRate: target.feeRate,\n      targetFeeRateType: target.feeRateType,\n      feeBase,\n      feeMain,\n    }\n  }\n\n  async getBalance(payport: ResolveablePayport): Promise<BalanceResult> {\n    const { address } = await this.resolvePayport(payport)\n    const result = await this._retryDced(() => this.getApi().getAddressDetails(address, { details: 'basic' }))\n    const confirmedBalance = this.toMainDenominationString(result.balance)\n    const unconfirmedBalance = this.toMainDenominationString(result.unconfirmedBalance)\n    this.logger.debug('getBalance', address, confirmedBalance, unconfirmedBalance)\n    return {\n      confirmedBalance,\n      unconfirmedBalance,\n      sweepable: this.isSweepableBalance(confirmedBalance)\n    }\n  }\n\n  usesUtxos() {\n    return true\n  }\n\n  async getAvailableUtxos(payport: ResolveablePayport): Promise<UtxoInfo[]> {\n    const { address } = await this.resolvePayport(payport)\n    let utxosRaw = await this.getApi().getUtxosForAddress(address)\n    const utxos: UtxoInfo[] = utxosRaw.map((data) => {\n      const { value, height, lockTime } = data\n      return {\n        ...data,\n        satoshis: value,\n        value: this.toMainDenominationString(value),\n        height: isUndefined(height) ? undefined : String(height),\n        lockTime: isUndefined(lockTime) ? undefined : String(lockTime),\n      }\n    })\n    return utxos\n  }\n\n  /**\n   * Sum the utxos values (main denomination)\n   */\n  _sumUtxoValue(utxos: UtxoInfo[]): BigNumber {\n    return utxos.reduce((total, { value }) => toBigNumber(value).plus(total), new BigNumber(0))\n  }\n\n  usesSequenceNumber() {\n    return false\n  }\n\n  async getNextSequenceNumber() {\n    return null\n  }\n\n  async resolveFromTo(from: number, to: ResolveablePayport): Promise<FromTo> {\n    const fromPayport = await this.getPayport(from)\n    const toPayport = await this.resolvePayport(to)\n    return {\n      fromAddress: fromPayport.address,\n      fromIndex: from,\n      fromExtraId: fromPayport.extraId,\n      fromPayport,\n      toAddress: toPayport.address,\n      toIndex: typeof to === 'number' ? to : null,\n      toExtraId: toPayport.extraId,\n      toPayport,\n    }\n  }\n\n  /**\n   * Build a simple payment transaction.\n   * Note: fee will be subtracted from first output when attempting to send entire account balance\n   * Note: All amounts/values should be input and output as main denomination strings for consistent\n   * serialization. Within this function they're converted to JS Numbers for convenient arithmetic\n   * then converted back to strings before being returned.\n   */\n  async buildPaymentTx(\n    availableUtxos: UtxoInfo[],\n    desiredOutputs: Array<BitcoinishTxOutput>,\n    changeAddress: string,\n    desiredFeeRate: FeeRate,\n    useAllUtxos: boolean = false,\n  ): Promise<BitcoinishPaymentTx> {\n    let outputTotal = 0\n    const outputs = desiredOutputs.map(({ address, value }) => ({\n      address,\n      satoshis: this.toBaseDenominationNumber(value),\n    }))\n    for (let i = 0; i < outputs.length; i++) {\n      const { address, satoshis } = outputs[i]\n      // validate\n      if (!await this.isValidAddress(address)) {\n        throw new Error(`Invalid ${this.coinSymbol} address ${address} provided for output ${i}`)\n      }\n      if (satoshis <= 0) {\n        throw new Error(`Invalid ${this.coinSymbol} amount ${satoshis} provided for output ${i}`)\n      }\n      outputTotal += satoshis\n    }\n    const outputCount = outputs.length + 1 // Plus one for change output\n\n    /* Select inputs and calculate appropriate fee */\n    let inputUtxos = []\n    let inputTotal = 0\n    let feeSat = 0 // Total fee is recalculated when adding each input\n    let amountWithFee = outputTotal + feeSat\n    if (useAllUtxos) {\n      inputUtxos = availableUtxos\n      inputTotal = this.toBaseDenominationNumber(this._sumUtxoValue(availableUtxos))\n      feeSat = this._calculatTxFeeSatoshis(desiredFeeRate, inputUtxos.length, outputCount)\n      amountWithFee = outputTotal + feeSat\n      this.logger.debug('buildPaymentTx', { inputTotal, feeSat, amountWithFee })\n    } else {\n      const sortedUtxos = sortUtxos(availableUtxos)\n      for (const utxo of sortedUtxos) {\n        inputUtxos.push(utxo)\n        inputTotal = inputTotal + this.toBaseDenominationNumber(utxo.value)\n        feeSat = this._calculatTxFeeSatoshis(desiredFeeRate, inputUtxos.length, outputCount)\n        amountWithFee = outputTotal + feeSat\n        if (inputTotal >= amountWithFee) {\n          break\n        }\n      }\n    }\n    if (amountWithFee > inputTotal) {\n      const amountWithSymbol = `${this.toMainDenominationString(outputTotal)} ${this.coinSymbol}`\n      if (outputTotal === inputTotal) {\n        this.logger.debug(`Attempting to send entire ${amountWithSymbol} balance. ` +\n          `Subtracting fee of ${feeSat} sat from first output.`)\n        amountWithFee = outputTotal\n        outputs[0].satoshis -= feeSat\n        outputTotal -= feeSat\n        if (outputs[0].satoshis <= this.dustThreshold) {\n          throw new Error(`First ${this.coinSymbol} output minus fee is below dust threshold`)\n        }\n      } else {\n        const { feeRate, feeRateType } = desiredFeeRate\n        const feeText = `${feeRate} ${feeRateType}${feeRateType === FeeRateType.BasePerWeight ? ` (${this.toMainDenominationString(feeSat)})` : ''}`\n        throw new Error(`You do not have enough UTXOs (${this.toMainDenominationString(inputTotal)}) to send ${amountWithSymbol} with ${feeText} fee`)\n      }\n    }\n\n    let changeSat = inputTotal - amountWithFee\n    let change = this.toMainDenominationString(changeSat)\n    if (changeSat > this.dustThreshold) { // Avoid creating dust outputs\n      outputs.push({ address: changeAddress, satoshis: changeSat })\n    } else if (changeSat > 0) {\n      this.logger.log(`${this.coinSymbol} change of ${changeSat} sat is below dustThreshold of ${this.dustThreshold}, adding to fee`)\n      feeSat += changeSat\n      changeSat = 0\n      change = '0'\n    }\n    return {\n      inputs: inputUtxos,\n      outputs: outputs.map(({ address, satoshis }) => ({ address, value: this.toMainDenominationString(satoshis) })),\n      fee: this.toMainDenominationString(feeSat),\n      change,\n      changeAddress,\n    }\n  }\n\n  async createTransaction(\n    from: number,\n    to: ResolveablePayport,\n    amountNumeric: Numeric,\n    options: CreateTransactionOptions = {},\n  ): Promise<BitcoinishUnsignedTransaction> {\n    this.logger.debug('createTransaction', from, to, amountNumeric)\n    const desiredAmount = toBigNumber(amountNumeric)\n    if (desiredAmount.isNaN() || desiredAmount.lte(0)) {\n      throw new Error(`Invalid ${this.coinSymbol} amount provided to createTransaction: ${desiredAmount}`)\n    }\n    const {\n      fromIndex, fromAddress, fromExtraId, toIndex, toAddress, toExtraId,\n    } = await this.resolveFromTo(from, to)\n\n    const availableUtxos = isUndefined(options.availableUtxos)\n      ? await this.getAvailableUtxos(from)\n      : options.availableUtxos\n      this.logger.debug('createTransaction availableUtxos', availableUtxos)\n\n    const { targetFeeLevel, targetFeeRate, targetFeeRateType } = await this.resolveFeeOption(options)\n    this.logger.debug(`createTransaction resolvedFeeOption ${targetFeeLevel} ${targetFeeRate} ${targetFeeRateType}`)\n\n    const paymentTx = await this.buildPaymentTx(\n      availableUtxos,\n      [{ address: toAddress, value: desiredAmount.toString() }],\n      fromAddress,\n      { feeRate: targetFeeRate, feeRateType: targetFeeRateType },\n      options.useAllUtxos,\n    )\n    this.logger.debug('createTransaction data', paymentTx)\n    const feeMain = paymentTx.fee\n\n    const actualAmount = paymentTx.outputs[0].value\n\n    return {\n      status: TransactionStatus.Unsigned,\n      id: null,\n      fromIndex,\n      fromAddress,\n      fromExtraId,\n      toIndex,\n      toAddress,\n      toExtraId,\n      amount: actualAmount,\n      targetFeeLevel,\n      targetFeeRate,\n      targetFeeRateType,\n      fee: feeMain,\n      sequenceNumber: null,\n      data: paymentTx,\n    }\n  }\n\n  async createSweepTransaction(\n    from: number,\n    to: ResolveablePayport,\n    options: CreateTransactionOptions = {},\n  ): Promise<BitcoinishUnsignedTransaction> {\n    this.logger.debug('createSweepTransaction', from, to, options)\n    const availableUtxos = isUndefined(options.availableUtxos)\n      ? await this.getAvailableUtxos(from)\n      : options.availableUtxos\n    if (availableUtxos.length === 0) {\n      throw new Error('No utxos to sweep')\n    }\n    const amount = this._sumUtxoValue(availableUtxos)\n    if (!this.isSweepableBalance(amount)) {\n      throw new Error(`Balance ${amount} too low to sweep`)\n    }\n    return this.createTransaction(from, to, amount, {\n      ...options,\n      availableUtxos,\n      useAllUtxos: true,\n    })\n  }\n\n  async broadcastTransaction(tx: BitcoinishSignedTransaction): Promise<BitcoinishBroadcastResult> {\n    const txId = await this._retryDced(() => this.getApi().sendTx(tx.data.hex))\n    if (tx.id !== txId) {\n      this.logger.warn(`Broadcasted ${this.coinSymbol} txid ${txId} doesn't match original txid ${tx.id}`)\n    }\n    return {\n      id: txId,\n    }\n  }\n\n  async getTransactionInfo(txId: string): Promise<BitcoinishTransactionInfo> {\n    const tx = await this._retryDced(() => this.getApi().getTx(txId))\n    const fee = this.toMainDenominationString(tx.fees)\n    const confirmationId = tx.blockHash || null\n    const confirmationNumber = tx.blockHeight ? String(tx.blockHeight) : undefined\n    const confirmationTimestamp = tx.blockTime ? new Date(tx.blockTime * 1000) : null\n    const isConfirmed = Boolean(confirmationNumber)\n    const status = isConfirmed ? TransactionStatus.Confirmed : TransactionStatus.Pending\n    const amountSat = get(tx, 'vout.0.value', tx.value)\n    const amount = this.toMainDenominationString(amountSat)\n    const fromAddress = get(tx, 'vin.0.addresses.0')\n    if (!fromAddress) {\n      throw new Error(`Unable to determine fromAddress of ${this.coinSymbol} tx ${txId}`)\n    }\n    const toAddress = get(tx, 'vout.0.addresses.0')\n    if (!toAddress) {\n      throw new Error(`Unable to determine toAddress of ${this.coinSymbol} tx ${txId}`)\n    }\n\n    return {\n      status,\n      id: tx.txid,\n      fromIndex: null,\n      fromAddress,\n      fromExtraId: null,\n      toIndex: null,\n      toAddress,\n      toExtraId: null,\n      amount,\n      fee,\n      sequenceNumber: null,\n      confirmationId,\n      confirmationNumber,\n      confirmationTimestamp,\n      isExecuted: isConfirmed,\n      isConfirmed,\n      confirmations: tx.confirmations,\n      data: tx,\n    }\n  }\n}\n","import * as t from 'io-ts'\nimport {\n  BaseConfig, BaseUnsignedTransaction, BaseSignedTransaction, FeeRate,\n  BaseTransactionInfo, BaseBroadcastResult, UtxoInfo,\n} from '@faast/payments-common'\nimport { extendCodec, enumCodec } from '@faast/ts-common'\nimport { Network as BitcoinjsNetwork } from 'bitcoinjs-lib'\nimport { BlockInfoBitcoin } from 'blockbook-client'\nimport { BitcoinishPaymentTx, BlockbookConfigServer } from './bitcoinish'\n\nexport { BitcoinjsNetwork, UtxoInfo }\nexport * from './bitcoinish/types'\n\nexport enum AddressType {\n  Legacy = 'p2pkh',\n  SegwitP2SH = 'p2sh-p2wpkh',\n  SegwitNative = 'p2wpkh',\n}\nexport const AddressTypeT = enumCodec<AddressType>(AddressType, 'AddressType')\n\nexport const BitcoinPaymentsUtilsConfig = extendCodec(\n  BaseConfig,\n  {},\n  {\n    server: BlockbookConfigServer,\n  },\n  'BitcoinPaymentsUtilsConfig',\n)\nexport type BitcoinPaymentsUtilsConfig = t.TypeOf<typeof BitcoinPaymentsUtilsConfig>\n\nexport const BaseBitcoinPaymentsConfig = extendCodec(\n  BitcoinPaymentsUtilsConfig,\n  {},\n  {\n    addressType: AddressTypeT,\n    minTxFee: FeeRate,\n    dustThreshold: t.number,\n    networkMinRelayFee: t.number,\n  },\n  'BaseBitcoinPaymentsConfig',\n)\nexport type BaseBitcoinPaymentsConfig = t.TypeOf<typeof BaseBitcoinPaymentsConfig>\n\nexport const HdBitcoinPaymentsConfig = extendCodec(\n  BaseBitcoinPaymentsConfig,\n  {\n    hdKey: t.string,\n  },\n  {\n    derivationPath: t.string,\n  },\n  'HdBitcoinPaymentsConfig',\n)\nexport type HdBitcoinPaymentsConfig = t.TypeOf<typeof HdBitcoinPaymentsConfig>\n\n// TODO: Add KeyPairBitcoinPaymentsConfig as a union to this once it exists\nexport const BitcoinPaymentsConfig = HdBitcoinPaymentsConfig\nexport type BitcoinPaymentsConfig = t.TypeOf<typeof BitcoinPaymentsConfig>\n\nexport const BitcoinUnsignedTransactionData = BitcoinishPaymentTx\nexport type BitcoinUnsignedTransactionData = t.TypeOf<typeof BitcoinUnsignedTransactionData>\n\nexport const BitcoinUnsignedTransaction = extendCodec(\n  BaseUnsignedTransaction,\n  {\n    amount: t.string,\n    fee: t.string,\n    data: BitcoinUnsignedTransactionData,\n  },\n  'BitcoinUnsignedTransaction',\n)\nexport type BitcoinUnsignedTransaction = t.TypeOf<typeof BitcoinUnsignedTransaction>\n\nexport const BitcoinSignedTransaction = extendCodec(BaseSignedTransaction, {\n  data: t.type({\n    hex: t.string,\n  }),\n}, {}, 'BitcoinSignedTransaction')\nexport type BitcoinSignedTransaction = t.TypeOf<typeof BitcoinSignedTransaction>\n\nexport const BitcoinTransactionInfo = extendCodec(BaseTransactionInfo, {}, {}, 'BitcoinTransactionInfo')\nexport type BitcoinTransactionInfo = t.TypeOf<typeof BitcoinTransactionInfo>\n\nexport const BitcoinBroadcastResult = extendCodec(BaseBroadcastResult, {}, {}, 'BitcoinBroadcastResult')\nexport type BitcoinBroadcastResult = t.TypeOf<typeof BitcoinBroadcastResult>\n\nexport const BitcoinBlock = BlockInfoBitcoin\nexport type BitcoinBlock = BlockInfoBitcoin\n","import { FeeLevel, NetworkType, FeeRateType } from '@faast/payments-common'\nimport { networks } from 'bitcoinjs-lib'\nimport { AddressType, BitcoinishPaymentsConfig } from './types'\n\nexport const PACKAGE_NAME = 'bitcoin-payments'\nexport const DECIMAL_PLACES = 8\nexport const COIN_SYMBOL = 'BTC'\nexport const COIN_NAME = 'Bitcoin'\n\n/**\n * The minimum value a transaction output must be in order to not get rejected by the network.\n *\n * Unit: `satoshis`\n */\nexport const DEFAULT_DUST_THRESHOLD = 546\n\n/**\n * The minimum fee required by *most* nodes to relay a transaction.\n *\n * Unit: `satoshis`\n */\nexport const DEFAULT_NETWORK_MIN_RELAY_FEE = 1000\n\n/**\n * The minimum fee this library should ever use for a transaction (overrides recommended levels).\n *\n * Unit: `sat/byte`\n */\nexport const DEFAULT_MIN_TX_FEE = 5\n\nexport const DEFAULT_ADDRESS_TYPE: AddressType = AddressType.SegwitNative\n\nexport const DEFAULT_DERIVATION_PATHS = {\n  [AddressType.Legacy]: \"m/44'/0'/0'\",\n  [AddressType.SegwitP2SH]: \"m/49'/0'/0'\",\n  [AddressType.SegwitNative]: \"m/84'/0'/0'\",\n}\n\nexport const DEFAULT_NETWORK = NetworkType.Mainnet\n\nexport const NETWORK_MAINNET = networks.bitcoin\nexport const NETWORK_TESTNET = networks.testnet\n\nexport const DEFAULT_MAINNET_SERVER = process.env.BITCOIN_SERVER_URL || 'https://btc1.trezor.io'\nexport const DEFAULT_TESTNET_SERVER = process.env.BITCOIN_TESTNET_SERVER_URL || 'https://tbtc1.trezor.io'\n\nexport const DEFAULT_FEE_LEVEL = FeeLevel.Medium\nexport const DEFAULT_SAT_PER_BYTE_LEVELS = {\n  [FeeLevel.High]: 50,\n  [FeeLevel.Medium]: 25,\n  [FeeLevel.Low]: 10,\n}\n","import { NetworkType, FeeLevel, FeeRateType, AutoFeeLevels } from '@faast/payments-common'\nimport request from 'request-promise-native'\nimport bs58 from 'bs58'\nimport { AddressType, BaseBitcoinPaymentsConfig } from './types'\nimport { BitcoinishPaymentsConfig } from './bitcoinish'\nimport {\n  DEFAULT_NETWORK,\n  NETWORK_TESTNET,\n  NETWORK_MAINNET,\n  DEFAULT_TESTNET_SERVER,\n  DEFAULT_MAINNET_SERVER,\n  DEFAULT_ADDRESS_TYPE,\n  COIN_SYMBOL,\n  COIN_NAME,\n  DECIMAL_PLACES,\n  DEFAULT_DUST_THRESHOLD,\n  DEFAULT_NETWORK_MIN_RELAY_FEE,\n  DEFAULT_MIN_TX_FEE,\n  DEFAULT_FEE_LEVEL,\n} from './constants'\n\nconst DEFAULT_BITCOINISH_CONFIG = {\n  coinSymbol: COIN_SYMBOL,\n  coinName: COIN_NAME,\n  decimals: DECIMAL_PLACES,\n  dustThreshold: DEFAULT_DUST_THRESHOLD,\n  networkMinRelayFee: DEFAULT_NETWORK_MIN_RELAY_FEE,\n  minTxFee: {\n    feeRate: DEFAULT_MIN_TX_FEE.toString(),\n    feeRateType: FeeRateType.BasePerWeight,\n  },\n  defaultFeeLevel: DEFAULT_FEE_LEVEL as AutoFeeLevels,\n}\n\nexport function bip32MagicNumberToPrefix(magicNum: number): string {\n  const b = Buffer.alloc(82)\n  b.writeUInt32BE(magicNum, 0)\n  return bs58.encode(b).slice(0, 4)\n}\n\nexport function toBitcoinishConfig<T extends BaseBitcoinPaymentsConfig>(config: T): BitcoinishPaymentsConfig {\n  const configWithDefaults = {\n    ...DEFAULT_BITCOINISH_CONFIG,\n    ...config,\n    network: config.network || DEFAULT_NETWORK,\n    addressType: config.addressType || DEFAULT_ADDRESS_TYPE,\n  }\n  const { network, server, addressType } = configWithDefaults\n  return {\n    ...configWithDefaults,\n    bitcoinjsNetwork: network === NetworkType.Testnet ? NETWORK_TESTNET : NETWORK_MAINNET,\n    isSegwit: addressType === AddressType.SegwitNative || addressType === AddressType.SegwitP2SH,\n    server: typeof server !== 'undefined'\n      ? server\n      : (network === NetworkType.Testnet\n        ? DEFAULT_TESTNET_SERVER\n        : DEFAULT_MAINNET_SERVER),\n  }\n}\n\n/** Get sat/byte fee estimate from blockcypher */\nexport async function getBlockcypherFeeEstimate(feeLevel: FeeLevel, networkType: NetworkType): Promise<number> {\n  const body = await request.get(\n    `https://api.blockcypher.com/v1/btc/${networkType === NetworkType.Mainnet ? 'main' : 'test3'}`,\n    { json: true },\n  )\n  const feePerKbField = `${feeLevel}_fee_per_kb`\n  const feePerKb = body[feePerKbField]\n  if (!feePerKb) {\n    throw new Error(`Blockcypher response is missing expected field ${feePerKbField}`)\n  }\n  return feePerKb / 1000\n}\n","import { createUnitConverters } from '@faast/payments-common'\nimport * as bitcoin from 'bitcoinjs-lib'\nimport * as bip32 from 'bip32'\nimport { BitcoinjsNetwork, AddressType } from './types'\nimport { DECIMAL_PLACES } from './constants'\n\nconst {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n} = createUnitConverters(DECIMAL_PLACES)\n\nexport {\n  toMainDenominationBigNumber,\n  toMainDenominationString,\n  toMainDenominationNumber,\n  toBaseDenominationBigNumber,\n  toBaseDenominationString,\n  toBaseDenominationNumber,\n}\n\nexport function isValidXprv(xprv: string, network: BitcoinjsNetwork): boolean {\n  try {\n    return !bip32.fromBase58(xprv, network).isNeutered()\n  } catch(e) {\n    return false\n  }\n}\n\nexport function isValidXpub(xpub: string, network: BitcoinjsNetwork): boolean {\n  try {\n    return bip32.fromBase58(xpub, network).isNeutered()\n  } catch(e) {\n    return false\n  }\n}\n\n/** Return string error if invalid, undefined otherwise */\nexport function validateHdKey(hdKey: string, network: BitcoinjsNetwork): string | undefined {\n  try {\n    bip32.fromBase58(hdKey, network)\n  } catch(e) {\n    return e.toString()\n  }\n}\n\nexport function isValidAddress(address: string, network: BitcoinjsNetwork): boolean {\n  try {\n    bitcoin.address.toOutputScript(address, network)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport function isValidExtraId(extraId: string): boolean {\n  return false\n}\n\nexport function publicKeyToAddress(publicKey: Buffer, network: BitcoinjsNetwork, addressType: AddressType): string {\n  let script: bitcoin.payments.Payment\n  if (addressType === AddressType.Legacy) {\n    script = bitcoin.payments.p2pkh({ network, pubkey: publicKey })\n  } else { // type is segwit\n    script = bitcoin.payments.p2wpkh({ network, pubkey: publicKey })\n\n    if (addressType === AddressType.SegwitP2SH) {\n      script = bitcoin.payments.p2sh({\n        network,\n        redeem: script\n      })\n    }\n  }\n  const { address } = script\n  if (!address) {\n    throw new Error('bitcoinjs-lib address derivation returned falsy value')\n  }\n  return address\n}\n\nfunction privateKeyToKeyPair(privateKey: string, network: BitcoinjsNetwork) {\n  return bitcoin.ECPair.fromWIF(privateKey, network)\n}\n\nexport function privateKeyToAddress(privateKey: string, network: BitcoinjsNetwork, addressType: AddressType) {\n  const keyPair = privateKeyToKeyPair(privateKey, network)\n  return publicKeyToAddress(keyPair.publicKey, network, addressType)\n}\n\nexport function isValidPrivateKey(privateKey: string, network: BitcoinjsNetwork): boolean {\n  try {\n    privateKeyToKeyPair(privateKey, network)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n","import { payments as bjsPayments, TransactionBuilder, ECPairInterface as ECPair } from 'bitcoinjs-lib'\nimport {\n  NetworkType, FeeRateType, FeeRate, TransactionStatus, AutoFeeLevels\n} from '@faast/payments-common'\n\nimport { getBlockcypherFeeEstimate, toBitcoinishConfig } from './utils'\nimport {\n  BaseBitcoinPaymentsConfig, BitcoinishUnsignedTransaction, BitcoinishPaymentTx,\n  BitcoinishSignedTransaction, AddressType,\n} from './types'\nimport {\n  DEFAULT_SAT_PER_BYTE_LEVELS, DEFAULT_ADDRESS_TYPE,\n} from './constants'\nimport { toBaseDenominationNumber, isValidAddress } from './helpers'\nimport { BitcoinishPayments } from './bitcoinish'\nimport { KeyPair } from './bip44'\n\nexport abstract class BaseBitcoinPayments<Config extends BaseBitcoinPaymentsConfig> extends BitcoinishPayments<Config> {\n  readonly addressType: AddressType\n\n  constructor(config: BaseBitcoinPaymentsConfig) {\n    super(toBitcoinishConfig(config))\n    this.addressType = config.addressType || DEFAULT_ADDRESS_TYPE\n  }\n\n  abstract getKeyPair(index: number): KeyPair\n\n  async isValidAddress(address: string): Promise<boolean> {\n    return isValidAddress(address, this.bitcoinjsNetwork)\n  }\n\n  async getFeeRateRecommendation(feeLevel: AutoFeeLevels): Promise<FeeRate> {\n    let satPerByte: number\n    try {\n      satPerByte = await getBlockcypherFeeEstimate(feeLevel, this.networkType)\n    } catch (e) {\n      satPerByte = DEFAULT_SAT_PER_BYTE_LEVELS[feeLevel]\n      this.logger.warn(\n        `Failed to get bitcoin ${this.networkType} fee estimate, using hardcoded default of ${feeLevel} sat/byte -- ${e.message}`\n      )\n    }\n    return {\n      feeRate: satPerByte.toString(),\n      feeRateType: FeeRateType.BasePerWeight,\n    }\n  }\n\n  async signTransaction(tx: BitcoinishUnsignedTransaction): Promise<BitcoinishSignedTransaction> {\n    const keyPair = this.getKeyPair(tx.fromIndex)\n    const { inputs, outputs } = tx.data as BitcoinishPaymentTx\n\n    let redeemScript = undefined\n    let prevOutScript = undefined\n    if (this.addressType === AddressType.SegwitP2SH) {\n      redeemScript = bjsPayments.p2wpkh({ pubkey: keyPair.publicKey }).output\n    } else if (this.addressType === AddressType.SegwitNative) {\n      prevOutScript = bjsPayments.p2wpkh({ pubkey: keyPair.publicKey }).output\n    }\n\n    let builder = new TransactionBuilder(this.bitcoinjsNetwork)\n    for (let output of outputs) {\n      builder.addOutput(output.address, toBaseDenominationNumber(output.value))\n    }\n    for (let i = 0; i < inputs.length; i++) {\n      const input = inputs[i]\n      builder.addInput(input.txid, input.vout, undefined, prevOutScript)\n    }\n    // Must add all inputs before signing them\n    for (let i = 0; i < inputs.length; i++) {\n      const input = inputs[i]\n      builder.sign(\n        i,\n        keyPair,\n        redeemScript,\n        undefined, // undefined for simple Segwit\n        toBaseDenominationNumber(input.value)\n      )\n    }\n    const built = builder.build()\n    const txId = built.getId()\n    const txHex = built.toHex()\n    return {\n      ...tx,\n      status: TransactionStatus.Signed,\n      id: txId,\n      data: {\n        hex: txHex,\n      },\n    }\n  }\n}\n","import bitcoin, { ECPair } from 'bitcoinjs-lib'\nimport { BIP32Interface as HDNode, fromBase58 } from 'bip32'\nimport { BitcoinjsNetwork, AddressType } from './types'\nimport { publicKeyToAddress } from './helpers'\n\nexport { HDNode }\n\nexport type KeyPair = ECPair.Signer & {\n  privateKey?: Buffer | undefined\n  toWIF(): string\n}\n\n/**\n * Split full path into array of indices\n *\n * @example \"m/44'/0'/0'/1/23\" -> [\"44'\", \"0'\", \"0'\", \"1\", \"23\"]\n */\nexport function splitDerivationPath(path: string): string[] {\n  let parts = path.split('/')\n  if (parts[0] === 'm') {\n    return parts.slice(1)\n  }\n  return parts\n}\n\n/**\n * Derive the base HDNode required for deriveKeyPair, deriveAddress, and derivePrivateKey functions\n *\n * This partially applies the derivation path starting at the already derived depth of the provided key.\n */\nexport function deriveHDNode(hdKey: string, derivationPath: string, network: BitcoinjsNetwork): HDNode {\n  const rootNode = fromBase58(hdKey, network)\n  const parts = splitDerivationPath(derivationPath).slice(rootNode.depth)\n  let node = rootNode\n  if (parts.length > 0) {\n    node = rootNode.derivePath(parts.join('/'))\n  }\n  return node\n}\n\nexport function deriveKeyPair(baseNode: HDNode, index: number, network: BitcoinjsNetwork): KeyPair {\n  return baseNode.derive(0).derive(index)\n}\n\nexport function deriveAddress(\n  baseNode: HDNode, index: number, network: BitcoinjsNetwork, addressType: AddressType,\n): string {\n  const keyPair = deriveKeyPair(baseNode, index, network)\n  return publicKeyToAddress(keyPair.publicKey, network, addressType)\n}\n\nexport function derivePrivateKey(baseNode: HDNode, index: number, network: BitcoinjsNetwork) {\n  const keyPair = deriveKeyPair(baseNode, index, network)\n  return keyPair.toWIF()\n}\n\nexport function xprvToXpub(xprv: string, derivationPath: string, network: BitcoinjsNetwork) {\n  const node = deriveHDNode(xprv, derivationPath, network)\n  return node.neutered().toBase58()\n}\n","import { omit } from 'lodash'\nimport {\n  assertType,\n} from '@faast/ts-common'\nimport bs58 from 'bs58'\nimport { xprvToXpub, deriveAddress, HDNode, deriveHDNode, deriveKeyPair } from './bip44'\nimport {\n  HdBitcoinPaymentsConfig,\n} from './types'\nimport { BaseBitcoinPayments } from './BaseBitcoinPayments'\nimport { DEFAULT_DERIVATION_PATHS } from './constants'\nimport { isValidXprv, isValidXpub, validateHdKey } from './helpers';\nimport { bip32MagicNumberToPrefix } from './utils'\n\nexport class HdBitcoinPayments extends BaseBitcoinPayments<HdBitcoinPaymentsConfig> {\n  readonly derivationPath: string\n  readonly xpub: string\n  readonly xprv: string | null\n  readonly hdNode: HDNode\n\n  constructor(public config: HdBitcoinPaymentsConfig) {\n    super(config)\n    assertType(HdBitcoinPaymentsConfig, config)\n    this.derivationPath = config.derivationPath || DEFAULT_DERIVATION_PATHS[this.addressType]\n\n    if (this.isValidXpub(config.hdKey)) {\n      this.xpub = config.hdKey\n      this.xprv = null\n    } else if (this.isValidXprv(config.hdKey)) {\n      this.xpub = xprvToXpub(config.hdKey, this.derivationPath, this.bitcoinjsNetwork)\n      this.xprv = config.hdKey\n    } else {\n      const providedPrefix = config.hdKey.slice(0, 4)\n      const xpubPrefix = bip32MagicNumberToPrefix(this.bitcoinjsNetwork.bip32.public)\n      const xprvPrefix = bip32MagicNumberToPrefix(this.bitcoinjsNetwork.bip32.private)\n      let reason = ''\n      if (providedPrefix !== xpubPrefix && providedPrefix !== xprvPrefix) {\n        reason = ` with prefix ${providedPrefix} but expected ${xprvPrefix} or ${xpubPrefix}`\n      } else {\n        reason = ` (${validateHdKey(config.hdKey, this.bitcoinjsNetwork)})`\n      }\n      throw new Error(\n        `Invalid ${this.networkType} hdKey provided to bitcoin payments config${reason}`\n      )\n    }\n    this.hdNode = deriveHDNode(config.hdKey, this.derivationPath, this.bitcoinjsNetwork)\n  }\n\n  isValidXprv(xprv: string) {\n    return isValidXprv(xprv, this.bitcoinjsNetwork)\n  }\n\n  isValidXpub(xpub: string) {\n    return isValidXpub(xpub, this.bitcoinjsNetwork)\n  }\n\n  getFullConfig() {\n    return {\n      ...this.config,\n      derivationPath: this.derivationPath,\n      addressType: this.addressType,\n    }\n  }\n\n  getPublicConfig() {\n    return {\n      ...omit(this.getFullConfig(), ['logger', 'server', 'hdKey']),\n      hdKey: this.xpub,\n    }\n  }\n  getAccountId(index: number): string {\n    return this.xpub\n  }\n  getAccountIds(): string[] {\n    return [this.xpub]\n  }\n\n  getAddress(index: number): string {\n    return deriveAddress(this.hdNode, index, this.bitcoinjsNetwork, this.addressType)\n  }\n\n  getKeyPair(index: number) {\n    if (!this.xprv) {\n      throw new Error(`Cannot get private key ${index} - HdBitcoinPayments was created with an xpub`)\n    }\n    return deriveKeyPair(this.hdNode, index, this.bitcoinjsNetwork)\n  }\n}\n","import { BitcoinishPaymentsUtils } from './bitcoinish'\nimport { toBitcoinishConfig } from './utils'\nimport { BitcoinPaymentsUtilsConfig } from './types'\nimport { isValidAddress, isValidPrivateKey } from './helpers'\n\nexport class BitcoinPaymentsUtils extends BitcoinishPaymentsUtils {\n  constructor(config: BitcoinPaymentsUtilsConfig = {}) {\n    super(toBitcoinishConfig(config))\n  }\n\n  async isValidAddress(address: string) {\n    return isValidAddress(address, this.bitcoinjsNetwork)\n  }\n\n  async isValidPrivateKey(privateKey: string) {\n    return isValidPrivateKey(privateKey, this.bitcoinjsNetwork)\n  }\n\n}\n","import { PaymentsFactory } from '@faast/payments-common'\n\nimport { BitcoinPaymentsConfig, HdBitcoinPaymentsConfig } from './types'\nimport { HdBitcoinPayments } from './HdBitcoinPayments'\n\nexport class BitcoinPaymentsFactory implements PaymentsFactory<BitcoinPaymentsConfig> {\n  forConfig(config: BitcoinPaymentsConfig) {\n    if (HdBitcoinPaymentsConfig.is(config)) {\n      return new HdBitcoinPayments(config)\n    }\n    throw new Error('Cannot instantiate bitcoin payments for unsupported config')\n  }\n}\n\nexport default BitcoinPaymentsFactory\n"],"names":["isString","BlockbookBitcoin","isMatchingError","toBigNumber","t.union","t.string","instanceofCodec","t.null","requiredOptionalCodec","NetworkTypeT","nullable","Logger","t.type","t.array","UtxoInfo","extendCodec","BaseUnsignedTransaction","BaseSignedTransaction","BaseTransactionInfo","BaseBroadcastResult","BlockInfoBitcoin","assertType","DelegateLogger","createUnitConverters","isNil","Payport","isUndefined","FeeRateType","isType","FeeOptionCustom","FeeLevel","TransactionStatus","get","AddressType","enumCodec","BaseConfig","FeeRate","t.number","NetworkType","networks","bip32.fromBase58","bitcoin.address","bitcoin.payments","bitcoin.ECPair","bjsPayments","TransactionBuilder","fromBase58","omit"],"mappings":"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"}