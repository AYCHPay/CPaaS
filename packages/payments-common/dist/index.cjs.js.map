{"version":3,"file":"index.cjs.js","sources":["../src/types.ts","../src/utils.ts","../src/errors.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport {\n  requiredOptionalCodec,\n  extendCodec,\n  enumCodec,\n  nullable,\n  DateT,\n  Logger,\n  functionT,\n  Numeric,\n} from '@faast/ts-common'\n\nexport enum NetworkType {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet',\n}\nexport const NetworkTypeT = enumCodec<NetworkType>(NetworkType, 'NetworkType')\n\nexport const BaseConfig = t.partial(\n  {\n    network: NetworkTypeT,\n    logger: Logger,\n  },\n  'BaseConfig',\n)\nexport type BaseConfig = t.TypeOf<typeof BaseConfig>\n\nexport const AddressOrIndex = t.union([t.string, t.number], 'AddressOrIndex')\nexport type AddressOrIndex = t.TypeOf<typeof AddressOrIndex>\n\nexport enum FeeLevel {\n  Custom = 'custom',\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\nexport const FeeLevelT = enumCodec<FeeLevel>(FeeLevel, 'FeeLevel')\n\nexport const AutoFeeLevels = t.keyof({\n  [FeeLevel.Low]: null,\n  [FeeLevel.Medium]: null,\n  [FeeLevel.High]: null,\n}, 'AutoFeeLevels')\nexport type AutoFeeLevels = t.TypeOf<typeof AutoFeeLevels>\n\nexport enum FeeRateType {\n  Main = 'main', // ie bitcoins, ethers\n  Base = 'base', // ie satoshis, wei\n  BasePerWeight = 'base/weight', // ie satoshis per byte, gas price (wei per gas)\n}\nexport const FeeRateTypeT = enumCodec<FeeRateType>(FeeRateType, 'FeeRateType')\n\nexport const FeeRate = t.type({\n  feeRate: t.string,\n  feeRateType: FeeRateTypeT,\n}, 'FeeRate')\nexport type FeeRate = t.TypeOf<typeof FeeRate>\n\nexport const FeeOptionCustom = extendCodec(\n  FeeRate,\n  {},\n  {\n    feeLevel: t.literal(FeeLevel.Custom),\n  },\n  'FeeOptionCustom',\n)\nexport type FeeOptionCustom = t.TypeOf<typeof FeeOptionCustom>\n\nexport const FeeOptionLevel = t.partial(\n  {\n    feeLevel: t.union([t.literal(FeeLevel.High), t.literal(FeeLevel.Medium), t.literal(FeeLevel.Low)]),\n  },\n  'FeeOptionLevel',\n)\nexport type FeeOptionLevel = t.TypeOf<typeof FeeOptionLevel>\n\nexport const FeeOption = t.union([FeeOptionCustom, FeeOptionLevel], 'FeeOption')\nexport type FeeOption = t.TypeOf<typeof FeeOption>\n\nexport const UtxoInfo = requiredOptionalCodec(\n  {\n    txid: t.string,\n    vout: t.number,\n    value: t.string, // main denomination\n  },\n  {\n    confirmations: t.number,\n    height: t.string,\n    lockTime: t.string,\n    coinbase: t.boolean,\n  },\n  'UtxoInfo',\n)\nexport type UtxoInfo = t.TypeOf<typeof UtxoInfo>\n\nexport const CreateTransactionOptions = extendCodec(\n  FeeOption,\n  {},\n  {\n    sequenceNumber: Numeric,\n    payportBalance: Numeric,\n    utxos: t.array(UtxoInfo),\n    useAllUtxos: t.boolean,\n  },\n  'CreateTransactionOptions',\n)\nexport type CreateTransactionOptions = t.TypeOf<typeof CreateTransactionOptions>\n\nexport const GetPayportOptions = t.partial({}, 'GetPayportOptions')\nexport type GetPayportOptions = t.TypeOf<typeof GetPayportOptions>\n\nexport const ResolvedFeeOption = t.type({\n  targetFeeLevel: FeeLevelT,\n  targetFeeRate: t.string,\n  targetFeeRateType: FeeRateTypeT,\n  feeBase: t.string,\n  feeMain: t.string,\n}, 'ResolvedFeeOption')\nexport type ResolvedFeeOption = t.TypeOf<typeof ResolvedFeeOption>\n\nexport const BalanceResult = t.type(\n  {\n    confirmedBalance: t.string, // balance with at least 1 confirmation\n    unconfirmedBalance: t.string, // balance that is pending confirmation\n    sweepable: t.boolean, // balance is high enough to be swept\n  },\n  'BalanceResult',\n)\nexport type BalanceResult = t.TypeOf<typeof BalanceResult>\n\nexport enum TransactionStatus {\n  Unsigned = 'unsigned',\n  Signed = 'signed',\n  Pending = 'pending',\n  Confirmed = 'confirmed',\n  Failed = 'failed',\n}\nexport const TransactionStatusT = enumCodec<TransactionStatus>(TransactionStatus, 'TransactionStatus')\n\nexport const TransactionCommon = requiredOptionalCodec(\n  {\n    status: TransactionStatusT,\n    id: nullable(t.string), // network txid\n    fromAddress: nullable(t.string), // sender address\n    toAddress: nullable(t.string), // recipient address\n    fromIndex: nullable(t.number), // sender address index\n    toIndex: nullable(t.number), // recipient address index, null if not ours\n    amount: nullable(t.string), // main denomination (eg \"0.125\")\n    fee: nullable(t.string), // total fee in main denomination\n  },\n  {\n    fromExtraId: nullable(t.string), // eg ripple sender tag\n    toExtraId: nullable(t.string), // eg Monero payment ID or ripple destination tag\n    sequenceNumber: nullable(t.union([t.string, t.number])), // eg Ethereum nonce or ripple sequence\n  },\n  'TransactionCommon',\n)\nexport type TransactionCommon = t.TypeOf<typeof TransactionCommon>\n\nconst UnsignedCommon = extendCodec(\n  TransactionCommon,\n  {\n    fromAddress: t.string,\n    toAddress: t.string,\n    fromIndex: t.number,\n    targetFeeLevel: FeeLevelT,\n    targetFeeRate: nullable(t.string),\n    targetFeeRateType: nullable(FeeRateTypeT),\n  },\n  {\n    inputUtxos: t.array(UtxoInfo),\n  },\n  'UnsignedCommon',\n)\ntype UnsignedCommon = t.TypeOf<typeof UnsignedCommon>\n\nexport const BaseUnsignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal(TransactionStatus.Unsigned),\n    data: t.object,\n  },\n  'BaseUnsignedTransaction',\n)\nexport type BaseUnsignedTransaction = t.TypeOf<typeof BaseUnsignedTransaction>\n\nexport const BaseSignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal(TransactionStatus.Signed),\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    data: t.object,\n  },\n  'BaseSignedTransaction',\n)\nexport type BaseSignedTransaction = t.TypeOf<typeof BaseSignedTransaction>\n\nexport const BaseTransactionInfo = extendCodec(\n  TransactionCommon,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    isExecuted: t.boolean, // true if transaction didn't fail (eg TRX/ETH contract succeeded)\n    isConfirmed: t.boolean,\n    confirmations: t.number, // 0 if not confirmed\n    confirmationId: nullable(t.string), // eg block/ledger hash. null if not confirmed\n    confirmationTimestamp: nullable(DateT), // block timestamp. null if timestamp unavailable or unconfirmed\n    data: t.object,\n  },\n  {\n    confirmationNumber: t.union([t.string, t.number]) // eg block number\n  },\n  'BaseTransactionInfo',\n)\nexport type BaseTransactionInfo = t.TypeOf<typeof BaseTransactionInfo>\n\nexport const BaseBroadcastResult = t.type(\n  {\n    id: t.string,\n  },\n  'BaseBroadcastResult',\n)\nexport type BaseBroadcastResult = t.TypeOf<typeof BaseBroadcastResult>\n\nexport const Payport = requiredOptionalCodec(\n  {\n    address: t.string,\n  },\n  {\n    extraId: nullable(t.string),\n  },\n  'Payport',\n)\nexport type Payport = t.TypeOf<typeof Payport>\n\nexport const BalanceActivityType = t.union([t.literal('in'), t.literal('out')], 'BalanceActivityType')\nexport type BalanceActivityType = t.TypeOf<typeof BalanceActivityType>\n\nexport const BalanceActivity = t.type(\n  {\n    type: BalanceActivityType,\n    networkType: NetworkTypeT,\n    networkSymbol: t.string,\n    assetSymbol: t.string,\n    address: t.string,\n    extraId: nullable(t.string),\n    amount: t.string,\n    externalId: t.string,\n    activitySequence: t.string,\n    confirmationId: t.string,\n    confirmationNumber: t.union([t.string, t.number]),\n    timestamp: DateT,\n  },\n  'BalanceActivity',\n)\nexport type BalanceActivity = t.TypeOf<typeof BalanceActivity>\n\nexport const BalanceMonitorConfig = BaseConfig\nexport type BalanceMonitorConfig = t.TypeOf<typeof BalanceMonitorConfig>\n\nexport const GetBalanceActivityOptions = t.partial(\n  {\n    from: t.union([Numeric, BalanceActivity]),\n    to: t.union([Numeric, BalanceActivity]),\n  },\n  'GetBalanceActivityOptions',\n)\nexport type GetBalanceActivityOptions = t.TypeOf<typeof GetBalanceActivityOptions>\n\nexport type BalanceActivityCallback = (ba: BalanceActivity) => Promise<void> | void\nexport const BalanceActivityCallback = functionT<BalanceActivityCallback>('BalanceActivityCallback')\n\nexport type FromTo = Pick<\n  BaseUnsignedTransaction,\n  'fromAddress' | 'fromIndex' | 'fromExtraId' | 'toAddress' | 'toIndex' | 'toExtraId'\n> & { fromPayport: Payport; toPayport: Payport }\n\nexport const ResolveablePayport = t.union([Payport, t.string, t.number], 'ResolveablePayport')\nexport type ResolveablePayport = t.TypeOf<typeof ResolveablePayport>\n\nexport const RetrieveBalanceActivitiesResult = t.type(\n  {\n    from: t.string,\n    to: t.string,\n  },\n  'RetrieveBalanceActivitiesResult',\n)\nexport type RetrieveBalanceActivitiesResult = t.TypeOf<typeof RetrieveBalanceActivitiesResult>\n","import BigNumber from 'bignumber.js'\nimport { Numeric } from '@faast/ts-common'\n\nexport function isMatchingError(e: Error, partialMessages: string[]) {\n  const messageLower = e.toString().toLowerCase()\n  return partialMessages.some(pm => messageLower.includes(pm.toLowerCase()))\n}\n\nexport function createUnitConverters(decimals: number) {\n  const basePerMain = new BigNumber(10).pow(decimals)\n\n  function toMainDenominationBigNumber(baseNumeric: Numeric): BigNumber {\n    const baseUnits = new BigNumber(baseNumeric)\n    if (baseUnits.isNaN()) {\n      throw new Error('Cannot convert to main denomination - not a number')\n    }\n    if (!baseUnits.isFinite()) {\n      throw new Error('Cannot convert to main denomination - not finite')\n    }\n    return baseUnits.div(basePerMain)\n  }\n\n  function toMainDenominationString(baseNumeric: Numeric): string {\n    return toMainDenominationBigNumber(baseNumeric).toString()\n  }\n\n  function toMainDenominationNumber(baseNumeric: Numeric): number {\n    return toMainDenominationBigNumber(baseNumeric).toNumber()\n  }\n\n  function toBaseDenominationBigNumber(mainNumeric: Numeric): BigNumber {\n    const mainUnits = new BigNumber(mainNumeric)\n    if (mainUnits.isNaN()) {\n      throw new Error('Cannot convert to base denomination - not a number')\n    }\n    if (!mainUnits.isFinite()) {\n      throw new Error('Cannot convert to base denomination - not finite')\n    }\n    return mainUnits.times(basePerMain)\n  }\n\n  function toBaseDenominationString(mainNumeric: Numeric): string {\n    return toBaseDenominationBigNumber(mainNumeric).toString()\n  }\n\n  function toBaseDenominationNumber(mainNumeric: Numeric): number {\n    return toBaseDenominationBigNumber(mainNumeric).toNumber()\n  }\n\n  return {\n    toMainDenominationBigNumber,\n    toMainDenominationNumber,\n    toMainDenominationString,\n    toBaseDenominationBigNumber,\n    toBaseDenominationNumber,\n    toBaseDenominationString,\n  }\n}\n","export enum PaymentsErrorCode {\n  TxExpired = 'PAYMENTS_TX_EXPIRED',\n  TxSequenceTooHigh = 'PAYMENTS_TX_SEQUENCE_TOO_HIGH',\n  TxSequenceCollision = 'PAYMENTS_TX_SEQUENCE_COLLISION',\n}\n\nexport class PaymentsError extends Error {\n  name = PaymentsError.name\n\n  constructor(public code: PaymentsErrorCode, message?: string | Error) {\n    super(typeof message === 'undefined' ? code : `${code} - ${message.toString()}`)\n  }\n}\n"],"names":["NetworkType","enumCodec","t.partial","Logger","t.union","t.string","t.number","FeeLevel","t.keyof","FeeRateType","t.type","extendCodec","t.literal","requiredOptionalCodec","t.boolean","Numeric","t.array","TransactionStatus","nullable","t.object","DateT","functionT","PaymentsErrorCode"],"mappings":"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"}