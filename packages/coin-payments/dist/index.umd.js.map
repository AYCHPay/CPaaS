{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/utils.ts","../src/constants.ts","../src/CoinPayments.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { extendCodec, Logger } from '@faast/ts-common'\nimport { NetworkTypeT } from '@faast/payments-common'\nimport { TronPaymentsConfig, BaseTronPaymentsConfig } from '@faast/tron-payments'\nimport { RipplePaymentsConfig, BaseRipplePaymentsConfig } from '@faast/ripple-payments'\nimport { StellarPaymentsConfig, BaseStellarPaymentsConfig } from '@faast/stellar-payments'\nimport { BitcoinPaymentsConfig, BaseBitcoinPaymentsConfig } from '@faast/bitcoin-payments'\nimport { EthereumPaymentsConfig, BaseEthereumPaymentsConfig } from '@faast/ethereum-payments'\n\nconst baseAssetConfigCodecs = {\n  TRX: BaseTronPaymentsConfig,\n  XRP: BaseRipplePaymentsConfig,\n  XLM: BaseStellarPaymentsConfig,\n  BTC: BaseBitcoinPaymentsConfig,\n  ETH: BaseEthereumPaymentsConfig,\n}\n\nexport const CoinPaymentsBaseAssetConfigs = t.type(baseAssetConfigCodecs, 'CoinPaymentsBaseAssetConfigs')\nexport type CoinPaymentsBaseAssetConfigs = t.TypeOf<typeof CoinPaymentsBaseAssetConfigs>\n\nconst assetConfigCodecs = {\n  TRX: TronPaymentsConfig,\n  XRP: RipplePaymentsConfig,\n  XLM: StellarPaymentsConfig,\n  BTC: BitcoinPaymentsConfig,\n  ETH: EthereumPaymentsConfig,\n}\nexport const CoinPaymentsAssetConfigs = t.type(assetConfigCodecs, 'CoinPaymentsAssetConfigs')\nexport type CoinPaymentsAssetConfigs = t.TypeOf<typeof CoinPaymentsAssetConfigs>\n\nexport const CoinPaymentsConfig = t.partial(\n  {\n    ...assetConfigCodecs,\n    network: NetworkTypeT,\n    logger: Logger,\n    seed: t.string,\n  },\n  'CoinPaymentsConfig',\n)\nexport type CoinPaymentsConfig = t.TypeOf<typeof CoinPaymentsConfig>\n\nexport const SupportedCoinPaymentsSymbol = t.keyof(assetConfigCodecs, 'SupportedCoinPaymentsSymbol')\nexport type SupportedCoinPaymentsSymbol = t.TypeOf<typeof SupportedCoinPaymentsSymbol>\n","\nexport function keysOf<T extends { [k: string]: any } | { [k: number]: any }>(o: T): (keyof T)[] {\n  return Object.keys(o) as (keyof T)[]\n}\n","import { PaymentsFactory } from '@faast/payments-common'\nimport { TronPaymentsFactory } from '@faast/tron-payments'\nimport { RipplePaymentsFactory } from '@faast/ripple-payments'\nimport { StellarPaymentsFactory } from '@faast/stellar-payments'\nimport { BitcoinPaymentsFactory } from '@faast/bitcoin-payments'\nimport { EthereumPaymentsFactory } from '@faast/ethereum-payments'\n\nimport { keysOf } from './utils'\nimport { SupportedCoinPaymentsSymbol } from './types'\n\nexport const PAYMENTS_FACTORIES: {\n  [A in SupportedCoinPaymentsSymbol]: PaymentsFactory\n} = {\n  TRX: new TronPaymentsFactory(),\n  XRP: new RipplePaymentsFactory(),\n  XLM: new StellarPaymentsFactory(),\n  BTC: new BitcoinPaymentsFactory(),\n  ETH: new EthereumPaymentsFactory(),\n}\n\nexport const SUPPORTED_ASSET_SYMBOLS = keysOf(PAYMENTS_FACTORIES)\n","import * as bip32 from 'bip32'\nimport { assertType, Logger } from '@faast/ts-common'\nimport { PaymentsFactory, AnyPayments, NetworkType } from '@faast/payments-common'\n\nimport { CoinPaymentsConfig, SupportedCoinPaymentsSymbol, CoinPaymentsAssetConfigs } from './types'\nimport { keysOf } from './utils'\nimport { SUPPORTED_ASSET_SYMBOLS, PAYMENTS_FACTORIES } from './constants'\n\nexport class CoinPayments {\n  readonly payments: { [A in SupportedCoinPaymentsSymbol]?: AnyPayments } = {}\n  readonly accountIds: string[]\n  readonly network: NetworkType\n  readonly logger: Logger\n\n  constructor(public readonly config: CoinPaymentsConfig) {\n    assertType(CoinPaymentsConfig, config)\n    this.network = config.network || NetworkType.Mainnet\n    this.logger = config.logger || console\n    const accountIdSet = new Set<string>()\n    SUPPORTED_ASSET_SYMBOLS.forEach((assetSymbol) => {\n      let assetConfig = config[assetSymbol]\n      if (!assetConfig && config.seed) {\n        const xprv = bip32.fromSeed(Buffer.from(config.seed, 'hex')).toBase58()\n        // TODO: make all payments accept seed so we can omit xprv\n        assetConfig = {\n          seed: config.seed,\n          hdKey: xprv,\n        }\n      }\n      if (!assetConfig) {\n        return\n      }\n      // Clone to avoid mutating external objects\n      assetConfig = { ...assetConfig }\n\n      if (config.network) {\n        assetConfig.network = config.network\n      }\n      if (config.logger) {\n        assetConfig.logger = config.logger\n      }\n      const assetPayments = PAYMENTS_FACTORIES[assetSymbol].forConfig(assetConfig)\n      this.payments[assetSymbol] = assetPayments\n      assetPayments.getAccountIds().forEach((id) => accountIdSet.add(id))\n    })\n    this.accountIds = Array.from(accountIdSet)\n  }\n\n  static getFactory(assetSymbol: SupportedCoinPaymentsSymbol): PaymentsFactory {\n    const paymentsFactory = PAYMENTS_FACTORIES[assetSymbol]\n    if (!paymentsFactory) {\n      throw new Error(`No payment factory configured for asset symbol ${assetSymbol}`)\n    }\n    return paymentsFactory\n  }\n\n  static getPayments<A extends SupportedCoinPaymentsSymbol>(\n    assetSymbol: A,\n    config: CoinPaymentsAssetConfigs[A],\n  ): AnyPayments {\n    const factory = CoinPayments.getFactory(assetSymbol)\n    return factory.forConfig(config)\n  }\n\n  getPublicConfig(): CoinPaymentsConfig {\n    return keysOf(this.payments).reduce((o, k) => {\n      o[k] = this.forAsset(k).getPublicConfig()\n      return o\n    }, {} as CoinPaymentsConfig)\n  }\n\n  getAccountIds(): string[] {\n    return this.accountIds\n  }\n\n  forAsset(assetSymbol: SupportedCoinPaymentsSymbol): AnyPayments {\n    const assetPayments = this.payments[assetSymbol]\n    if (!assetPayments) {\n      throw new Error(`No payments interface configured for ${assetSymbol}`)\n    }\n    return assetPayments\n  }\n\n  isAssetSupported(assetSymbol: string): assetSymbol is SupportedCoinPaymentsSymbol {\n    return SupportedCoinPaymentsSymbol.is(assetSymbol)\n  }\n\n  isAssetConfigured(assetSymbol: SupportedCoinPaymentsSymbol): boolean {\n    return Boolean(this.payments[assetSymbol])\n  }\n\n}\n\nexport default CoinPayments\n"],"names":["BaseTronPaymentsConfig","BaseRipplePaymentsConfig","BaseStellarPaymentsConfig","BaseBitcoinPaymentsConfig","BaseEthereumPaymentsConfig","t.type","TronPaymentsConfig","RipplePaymentsConfig","StellarPaymentsConfig","BitcoinPaymentsConfig","EthereumPaymentsConfig","t.partial","NetworkTypeT","Logger","t.string","t.keyof","TronPaymentsFactory","RipplePaymentsFactory","StellarPaymentsFactory","BitcoinPaymentsFactory","EthereumPaymentsFactory","assertType","NetworkType","bip32.fromSeed"],"mappings":"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"}